# Define the target variable
target = 'log_humanVDssL/kg'

# Define feature columns for subgrouping
features_to_test = ['log_MW', 'log_HBA', 'log_TPSANO', 'moka_ionState7.4_encoded', 'MoKa.LogP', 'MoKa.LogD7.4']

# Standardize the features
scaler = StandardScaler()
train_df[features_to_test] = scaler.fit_transform(train_df[features_to_test])
val_df[features_to_test] = scaler.transform(val_df[features_to_test])
test_df[features_to_test] = scaler.transform(test_df[features_to_test])

# Define initial subgroups based on 'human VDss (L/kg)'
train_df['subgroup'] = train_df['human VDss (L/kg)'].apply(lambda x: 0 if x < 0.5 else (1 if 0.5 <= x < 1.7 else 2))
val_df['subgroup'] = np.nan
test_df['subgroup'] = np.nan

# Combine datasets for label propagation
combined_df = pd.concat([train_df, val_df, test_df], ignore_index=True)
combined_df.loc[:len(train_df) - 1, 'subgroup'] = train_df['subgroup'].values  # Known labels from train

# Extract features and labels
X_combined = combined_df[features_to_test]
y_combined = combined_df['subgroup'].fillna(-1)  # Unlabeled data as -1

# Initialize and fit LabelPropagation model
label_spread = LabelPropagation(kernel='rbf', gamma=0.9, max_iter=20, n_neighbors=20)
label_spread.fit(X_combined, y_combined)

# Predict for the entire combined set
combined_df['spread_subgroup'] = label_spread.predict(X_combined)

# Create binary subgroup indicators
for i in range(label_spread.classes_.shape[0]):
    combined_df[f'subgroup{i+1}'] = (combined_df['spread_subgroup'] == i).astype(int)

# Split the combined_df back into train, val, test
train_len = len(train_df)
val_len = len(val_df)
test_len = len(test_df)

train_df['subgroup'] = combined_df.iloc[:train_len]['spread_subgroup'].values
val_df['subgroup'] = combined_df.iloc[train_len:train_len + val_len]['spread_subgroup'].values
test_df['subgroup'] = combined_df.iloc[train_len + val_len:train_len + val_len + test_len]['spread_subgroup'].values

for i in range(label_spread.classes_.shape[0]):
    train_df[f'subgroup{i+1}'] = combined_df.iloc[:train_len][f'subgroup{i+1}'].values
    val_df[f'subgroup{i+1}'] = combined_df.iloc[train_len:train_len + val_len][f'subgroup{i+1}'].values
    test_df[f'subgroup{i+1}'] = combined_df.iloc[train_len + val_len:train_len + val_len + test_len][f'subgroup{i+1}'].values
